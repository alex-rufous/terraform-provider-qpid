package qpid

import (
	"fmt"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
	"net/http"
	"testing"
)

func TestAcceptanceKeyStore(t *testing.T) {

	privateKey, certificateBytes, err := generateSelfSigned("Foo Org", "localhost")
	storeType := "NonJavaKeyStore"
	if err != nil {
		storeType = "AutoGeneratedSelfSigned"
	}
	certificateEncoded := certificateBytesToBase64(certificateBytes)
	privateKeyEncoded, err := privateKeyToBase64(privateKey)
	if err != nil {
		storeType = "AutoGeneratedSelfSigned"
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAcceptancePreCheck(t) },
		Providers:    testAcceptanceProviders,
		CheckDestroy: testAcceptanceKeyStoreCheckDestroy(testAcceptanceKeyStoreName),
		Steps: []resource.TestStep{
			{
				// test new key store creation from configuration
				Config: getKeyStoreConfiguration(storeType, privateKeyEncoded, certificateEncoded),
				Check: testAcceptanceKeyStoreCheck(
					testAcceptanceKeyStoreResource,
					&map[string]interface{}{"name": testAcceptanceKeyStoreName},
				),
			},
			{
				// test key store restoration from configuration after its deletion on broker side
				PreConfig: dropKeyStore(testAcceptanceKeyStoreName),
				Config:    getKeyStoreConfiguration(storeType, privateKeyEncoded, certificateEncoded),
				Check: testAcceptanceKeyStoreCheck(
					testAcceptanceKeyStoreResource,
					&map[string]interface{}{"name": testAcceptanceKeyStoreName},
				),
			},
			{
				// test key store update
				Config: getKeyStoreConfigurationWithAttributes(storeType, privateKeyEncoded, certificateEncoded, `context = {"foo"="bar"}`),
				Check: testAcceptanceKeyStoreCheck(
					testAcceptanceKeyStoreResource,
					&map[string]interface{}{"name": testAcceptanceKeyStoreName,
						"context": map[string]interface{}{"foo": "bar"}},
				),
			},
			{
				// test key store attribute removal
				Config: getKeyStoreConfiguration(storeType, privateKeyEncoded, certificateEncoded),
				Check: testAcceptanceKeyStoreCheck(
					testAcceptanceKeyStoreResource,
					&map[string]interface{}{"name": testAcceptanceKeyStoreName},
					"context",
				),
			},
		},
	})
}

func dropKeyStore(nodeName string) func() {
	return func() {
		client := testAcceptanceProvider.Meta().(*Client)
		resp, err := client.DeleteKeyStore(nodeName)
		if err != nil {
			fmt.Printf("unable to delete key store: %v", err)
			return
		}

		if resp.StatusCode != http.StatusOK {
			panic(fmt.Errorf("failed to delete key store: %v", resp))
		}
	}
}

func testAcceptanceKeyStoreCheck(rn string, expectedAttributes *map[string]interface{}, removed ...string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[rn]
		if !ok {
			return fmt.Errorf("resource not found: %s", rn)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("key store id not set")
		}

		client := testAcceptanceProvider.Meta().(*Client)
		providers, err := client.GetKeyStores()
		if err != nil {
			return fmt.Errorf("error getting key store: %s", err)
		}

		for _, provider := range *providers {
			if provider["id"] == rs.Primary.ID {
				return assertExpectedAndRemovedAttributes(&provider, expectedAttributes, removed)
			}
		}

		return fmt.Errorf("key store '%s' is not found", rn)
	}
}

func testAcceptanceKeyStoreCheckDestroy(name string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAcceptanceProvider.Meta().(*Client)
		providers, err := client.GetKeyStores()
		if err != nil {
			return fmt.Errorf("error getting providers: %s", err)
		}

		for _, node := range *providers {
			if node["name"] == name {
				return fmt.Errorf("key store '%v' still exists", node)
			}
		}

		return nil
	}
}

const testAcceptanceKeyStoreResourceName = "qpid_key_store"
const testAcceptanceKeyStoreName = "acceptance_test_key_store"
const testAcceptanceKeyStoreResource = testAcceptanceKeyStoreResourceName + "." + testAcceptanceKeyStoreName

func getKeyStoreConfiguration(storeType string, privateKeyEncoded string, certificateEncoded string) string {
	return getKeyStoreConfigurationWithAttributes(storeType, privateKeyEncoded, certificateEncoded)
}

func getKeyStoreConfigurationWithAttributes(storeType string, privateKeyEncoded string, certificateEncoded string, entries ...string) string {
	config := `
resource "` + testAcceptanceKeyStoreResourceName + `" "` + testAcceptanceKeyStoreName + `" {
    name = "` + testAcceptanceKeyStoreName + `"
    type = "` + storeType + `"
`
	if storeType == "NonJavaKeyStore" {
		config += `
	private_key_url = "data:;base64,` + privateKeyEncoded + `"
    certificate_url = "data:;base64,` + certificateEncoded + `"
`
	}

	for _, v := range entries {
		config += fmt.Sprintf("    %v\n", v)
	}
	config += `}
`

	return config
}
